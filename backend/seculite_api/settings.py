"""
Django settings for seculite_api project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-qop#exrq=%y%((d4c4%f6oy9f+ts7*z&+-n725)5^nhxfr$y!j')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG will be True if DJANGO_DEBUG is set to 'True' (case-insensitive)
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

# ALLOWED_HOSTS should be a comma-separated string in the environment variable
ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1,backend')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # For TokenAuthentication used by dj-rest-auth
    'corsheaders',
    'django_filters',
    'dj_rest_auth',
    'django.contrib.sites', # Required by django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount', # Optional, if you plan to use social login
    'dj_rest_auth.registration',
    'django_celery_beat', # For scheduling periodic tasks
    # Local apps
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Required for django-allauth
]

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = DEBUG # Allow all origins in DEBUG mode
# If not in DEBUG mode, you should set specific origins:
# CORS_ALLOWED_ORIGINS = [
#    "http://localhost:5173", # Example: Vue.js dev server
#    "http://127.0.0.1:5173",
#    "http://localhost:80", # Example: Nginx serving frontend
# ]
# CORS_ALLOW_CREDENTIALS = True # If you need to allow cookies to be sent

ROOT_URLCONF = 'seculite_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'seculite_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.postgresql')
DB_NAME = os.environ.get('DB_NAME', 'seculite_db')
DB_USER = os.environ.get('DB_USER', 'seculite_user')
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'your_secure_password_for_db_user') # Ensure this has a default or is always set in .env
DB_HOST = os.environ.get('DB_HOST', 'db')
DB_PORT = os.environ.get('DB_PORT', '5432')

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# ]

# Media files (User-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'core.authentication.ApiKeyAuthentication', # Custom API Key auth
        'rest_framework.authentication.TokenAuthentication', # dj-rest-auth default
        'rest_framework.authentication.SessionAuthentication', # For browsable API and web sessions
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25, # Default page size for pagination
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    # 'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%S.%fZ", # Example: ISO 8601 format for datetimes
}

SITE_ID = 1 # Required by django-allauth

# django-allauth specific settings (examples, customize as needed)
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Can be 'mandatory', 'optional', or 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Use email ONLY for login
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False # Username no longer required for login/signup
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # Explicitly state username field is not used
# ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
# For dj-rest-auth to work with JWT (if you switch from TokenAuth later)
# REST_USE_JWT = True
# DJOSER settings might go here if you were using Djoser instead

# Explicitly define Authentication Backends
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Celery Configuration Options
# ----------------------------
# These are read by app.config_from_object('django.conf:settings', namespace='CELERY')
# So, they should be prefixed with CELERY_ in settings.py

# Broker URL (already configured via environment variable)
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')

# Result Backend (already configured via environment variable)
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')

# Task serialization format
CELERY_TASK_SERIALIZER = 'json'

# Result serialization format
CELERY_RESULT_SERIALIZER = 'json'

# Accept content types
CELERY_ACCEPT_CONTENT = ['json']

# Timezone for Celery. Django's TIME_ZONE is UTC, Celery should align.
CELERY_TIMEZONE = TIME_ZONE # Use Django's TIME_ZONE setting (UTC)

# Enable UTC for Celery. Recommended.
CELERY_ENABLE_UTC = True

# Task result expiration time (e.g., 1 day)
CELERY_RESULT_EXPIRES = 86400 # 24 * 60 * 60 seconds

# Beat scheduler (if using Celery Beat directly without django-celery-beat for some tasks)
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # Already set in docker-compose for beat service
                                                                          # but if using beat within worker, might be set here.
                                                                          # For now, the beat service handles this.

# Celery worker concurrency (default is number of CPUs)
# CELERY_WORKER_CONCURRENCY = os.cpu_count() # Can be set via env var if needed

# It's good practice to have a default queue
CELERY_TASK_DEFAULT_QUEUE = 'default'

# Example of defining other queues (if needed later)
# from kombu import Queue
# CELERY_TASK_QUEUES = (
#     Queue('default', routing_key='task.#'),
#     Queue('scans', routing_key='scans.#'),
# )
