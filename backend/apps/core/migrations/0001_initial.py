# Generated by Django 5.0.14 on 2025-05-14 19:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ScanTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_value', models.CharField(max_length=1024, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SecurityTool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default='', editable=False, max_length=64, unique=True)),
                ('name', models.CharField(blank=True, help_text='A friendly name for this API key.', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Optional: Set an expiration date for the key.', null=True)),
                ('last_used', models.DateTimeField(blank=True, editable=False, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('codebase_path_or_url', models.CharField(blank=True, help_text='Optional: Path to the local codebase or URL of the Git repository.', max_length=2000, null=True)),
                ('web_app_url', models.URLField(blank=True, help_text='Optional: URL of the primary web application to scan.', max_length=2000, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('manager', 'Manager'), ('developer', 'Developer'), ('viewer', 'Viewer')], default='viewer', max_length=10)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['project__name', 'user__username'],
                'unique_together': {('user', 'project')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='members',
            field=models.ManyToManyField(related_name='project_memberships', through='core.ProjectMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ScanConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('has_predefined_targets', models.BooleanField(default=False)),
                ('target_details_json', models.JSONField(blank=True, help_text='Structured target info, e.g., repo URL, paths. Used if has_predefined_targets is true.', null=True)),
                ('tool_configurations_json', models.JSONField(blank=True, help_text='Tool-specific settings, e.g., Bandit severity, Semgrep rules.', null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scan_configurations', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scan_configurations', to='core.project')),
            ],
            options={
                'ordering': ['project__name', 'name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ScanJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('celery_task_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('QUEUED', 'Queued'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('TIMEOUT', 'Timeout')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_timestamp', models.DateTimeField(blank=True, null=True)),
                ('completed_timestamp', models.DateTimeField(blank=True, null=True)),
                ('commit_hash', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('branch_name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('repository_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('ci_build_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('triggered_by_ci', models.BooleanField(default=False)),
                ('target_info', models.JSONField(blank=True, help_text='The specific target information used for this scan job.', null=True)),
                ('tool_settings', models.JSONField(blank=True, help_text='The specific tool settings used for this scan job.', null=True)),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_scan_jobs', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scan_jobs', to='core.project')),
                ('scan_configuration', models.ForeignKey(blank=True, help_text='Configuration used for this job, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scan_jobs', to='core.scanconfiguration')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tool_name', models.CharField(help_text='Name of the security tool that produced this result, e.g., Bandit', max_length=100)),
                ('summary_data', models.JSONField(blank=True, help_text='Summary of findings, e.g., severity counts', null=True)),
                ('raw_output', models.TextField(blank=True, help_text='Full raw output from the tool, if stored', null=True)),
                ('findings', models.JSONField(default=list, help_text='Structured list of findings/vulnerabilities')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the tool failed for this result part', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this specific result was recorded')),
                ('scan_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.scanjob')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TargetGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('targets', models.ManyToManyField(related_name='target_groups', to='core.scantarget')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('api_key_placeholder', models.CharField(blank=True, help_text='Placeholder for API key info/management', max_length=128, null=True)),
                ('receive_email_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
