# .env.example - Environment variables for SecuLite v2
# Copy this file to .env and fill in your actual values.
# DO NOT COMMIT .env TO VERSION CONTROL.

# General Settings
# ----------------
# Set to "development" or "production"
# In Django, this might influence DEBUG settings, allowed hosts, etc.
ENVIRONMENT=development

# Django Backend Settings
# -----------------------
# SECURITY WARNING: keep the secret key used in production secret!
# Generate a new secret key for your project, e.g., using python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
DJANGO_SECRET_KEY=your_django_secret_key_here

# Set to True for development, False for production
DJANGO_DEBUG=True

# Allowed hosts for Django. For development, localhost and 127.0.0.1 are common.
# For production, set to your actual domain(s), e.g., "yourdomain.com,www.yourdomain.com"
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend

# Internal port the Django app (Gunicorn) runs on inside the container
DJANGO_INTERNAL_PORT=8000

# PostgreSQL Database Settings (for Django and Celery Beat Scheduler)
# -------------------------------------------------------------------
DB_ENGINE=django.db.backends.postgresql
DB_NAME=seculite_db
DB_USER=seculite_user
DB_PASSWORD=your_secure_password_for_db_user
DB_HOST=db # This is the service name of the PostgreSQL container in docker-compose.yml
DB_PORT=5432

# Variables for PostgreSQL container initialization (uses values from DB_USER, DB_PASSWORD, DB_NAME)
POSTGRES_USER=${DB_USER}
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=${DB_NAME}

# PGPASSWORD is used by psql in entrypoint.sh if DB_PASSWORD is not directly used by psql
# Ensure this matches DB_PASSWORD if psql needs it explicitly.
PGPASSWORD=${DB_PASSWORD}

# Redis Settings (for Celery Broker and potentially Caching)
# ---------------------------------------------------------
REDIS_HOST=redis # Service name of the Redis container
REDIS_PORT=6379
REDIS_DB_CELERY=0 # Database number for Celery
REDIS_DB_CACHE=1  # Database number for Django caching (if used)

# Celery Settings
# ---------------
# Broker URL (using Redis)
CELERY_BROKER_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY}
# Result Backend URL (can also be Redis or PostgreSQL)
# Using Redis for results:
CELERY_RESULT_BACKEND=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB_CELERY}
# Or using Django DB for results (requires django-celery-results package):
# CELERY_RESULT_BACKEND=django-db

# Celery Beat Scheduler Settings (if using django-celery-beat)
# -----------------------------------------------------------
# The entrypoint.sh script for the 'beat' service uses django_celery_beat.schedulers:DatabaseScheduler
# which stores schedules in the Django database. No specific env vars needed here beyond DB access.

# Frontend Settings (if any need to be passed at build time or runtime via Nginx)
# -----------------------------------------------------------------------------------
# Example: API base URL for the frontend to connect to
# This is typically configured in the Vue.js app itself, but can be influenced by build-time env vars.
# VUE_APP_API_BASE_URL=/api

# Nginx Settings (related to domain names, SSL - though often managed in nginx.conf directly)
# ---------------------------------------------------------------------------------------------
# NGINX_HOST=localhost
# NGINX_PORT=80

# Entrypoint Script Variables (Optional control flags)
# ----------------------------------------------------
# Set to "false" to skip waiting for DB on Gunicorn startup (not recommended for first run)
WAIT_FOR_DB=true
# Set to "false" to skip waiting for DB on Celery worker startup
WAIT_FOR_DB_CELERY=true
# Set to "false" to skip waiting for DB on Celery beat startup
WAIT_FOR_DB_CELERY_BEAT=true

# Django Superuser Creation (Optional - set these to auto-create first user)
# ------------------------------------------------------------------------
DJANGO_SUPERUSER_USERNAME=admin
DJANGO_SUPERUSER_EMAIL=admin@example.com
DJANGO_SUPERUSER_PASSWORD=your_secure_superuser_password

# Add any other application-specific settings here
# E.g., API keys for external services, email server settings, etc. 